syntax = "proto3";

package api;

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";

service Tendermint {
  // GetLatestBlock returns the latest block.
  rpc GetLatestBlock(GetLatestBlockRequest) returns (GetBlockResponse) {}

  // GetBlockByHeight queries block for given height.
  rpc GetBlockByHeight(GetBlockByHeightRequest) returns (GetBlockResponse) {}
}

// Validator is the type for the validator-set.
message Validator {
  string address = 1;
  google.protobuf.Any pub_key = 2;
  int64 voting_power = 3;
  int64 proposer_priority = 4;
}

// GetBlockByHeightRequest is the request type for the Query/GetBlockByHeight
// RPC method.
message GetBlockByHeightRequest {
  int64 height = 1;
}

message PartSetHeader {
  uint32 total = 1;
  bytes hash = 2;
}

message BlockID {
  bytes hash = 1;
  PartSetHeader parts = 2;
}

// Data contains the set of transactions included in the block
message Data {
  // Txs that will be applied by state @ block.Height+1.
  // NOTE: not all txs here are valid.  We're just agreeing on the order first.
  // This means that block.AppHash does not include these txs.
  repeated bytes txs = 1;
}

// Consensus captures the consensus rules for processing a block in the
// blockchain, including all blockchain data structures and the rules of the
// application's state transition machine.
message Consensus {
  string block = 1;
  string app = 2;
}

// Header defines the structure of a block header.
message Header {
  // basic block info
  Consensus version = 1;
  string chain_id = 2;
  string height = 3;
  string time = 4;

  // prev block info
  BlockID last_block_id = 5;

  // hashes of block data
  bytes last_commit_hash = 6;  // commit from validators from the last block
  bytes data_hash = 7;         // transactions

  // hashes from the app output from the prev block
  bytes validators_hash = 8;       // validators for the current block
  bytes next_validators_hash = 9;  // validators for the next block
  bytes consensus_hash = 10;       // consensus params for current block
  bytes app_hash = 11;             // state after txs from the previous block
  bytes last_results_hash =
      12;  // root hash of all results from the txs from the previous block

  // consensus info
  bytes evidence_hash = 13;     // evidence included in the block
  bytes proposer_address = 14;  // original proposer of the block
}

message Evidence {
  oneof sum {
    DuplicateVoteEvidence duplicate_vote_evidence = 1;
    LightClientAttackEvidence light_client_attack_evidence = 2;
  }
}

// SignedMsgType is a type of signed message in the consensus.
enum SignedMsgType {
  SIGNED_MSG_TYPE_UNKNOWN = 0;
  // Votes
  SIGNED_MSG_TYPE_PREVOTE = 1;
  SIGNED_MSG_TYPE_PRECOMMIT = 2;

  // Proposals
  SIGNED_MSG_TYPE_PROPOSAL = 32;
}

// Vote represents a prevote, precommit, or commit vote from validators for
// consensus.
message Vote {
  SignedMsgType type = 1;
  int64 height = 2;
  int32 round = 3;
  BlockID block_id = 4;  // zero if vote is nil.
  string timestamp = 5;
  bytes validator_address = 6;
  int32 validator_index = 7;
  bytes signature = 8;
}

// DuplicateVoteEvidence contains evidence of a validator signed two conflicting
// votes.
message DuplicateVoteEvidence {
  Vote vote_a = 1;
  Vote vote_b = 2;
  int64 total_voting_power = 3;
  int64 validator_power = 4;
  string timestamp = 5;
}

message SignedHeader {
  Header header = 1;
  Commit commit = 2;
}

message ValidatorSet {
  repeated Validator validators = 1;
  Validator proposer = 2;
  int64 total_voting_power = 3;
}

message LightBlock {
  SignedHeader signed_header = 1;
  ValidatorSet validator_set = 2;
}

// LightClientAttackEvidence contains evidence of a set of validators attempting
// to mislead a light client.
message LightClientAttackEvidence {
  LightBlock conflicting_block = 1;
  int64 common_height = 2;
  repeated Validator byzantine_validators = 3;
  int64 total_voting_power = 4;
  string timestamp = 5;
}

message EvidenceList {
  repeated Evidence evidence = 1;
}

// Commit contains the evidence that a block was committed by a set of
// validators.
message Commit {
  string height = 1;
  int32 round = 2;
  BlockID block_id = 3;
  repeated CommitSig signatures = 4;
}

// BlockIdFlag indicates which BlcokID the signature is for
enum BlockIDFlag {
  BLOCK_ID_FLAG_UNKNOWN = 0;
  BLOCK_ID_FLAG_ABSENT = 1;
  BLOCK_ID_FLAG_COMMIT = 2;
  BLOCK_ID_FLAG_NIL = 3;
}

// CommitSig is a part of the Vote included in a Commit.
message CommitSig {
  BlockIDFlag block_id_flag = 1;
  bytes validator_address = 2;
  string timestamp = 3;
  bytes signature = 4;
}

// Block is tendermint type Block, with the Header proposer address
// field converted to bech32 string.
message Block {
  Header header = 1;
  Data data = 2;
  EvidenceList evidence = 3;
  Commit last_commit = 4;
}

// GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight
// RPC method.
message GetBlockResponse {
  BlockID block_id = 1;

  // Since: cosmos-sdk 0.47
  Block block = 2;
}

// GetLatestBlockRequest is the request type for the Query/GetLatestBlock RPC
// method.
message GetLatestBlockRequest {}

option go_package = "./api/";